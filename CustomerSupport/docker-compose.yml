version: '3.4'

services:
  customer:
    image: ${DOCKER_REGISTRY-}customer
    build:
      context: .
      dockerfile: src/Customer/Dockerfile

  review:
    image: ${DOCKER_REGISTRY-}review
    build:
      context: .
      dockerfile: src/Review/Dockerfile

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:latest
    container_name: broker
    ports:
        - "9092:9092"
    depends_on:
        - zookeeper
    environment:
        KAFKA_BROKER_ID: 1
        KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 

  init-kafka:
    

  PostgesCustomer:
    container_name: Customer
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Customerdb
    volumes:
       - ./Customer:/customer-data/postgres
    ports:
       - "5432:5432"
    restart: unless-stopped

  PostgesReview:
    container_name: Review
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Customerdb
    volumes:
       - ./Review:/review-data/postgres
    ports:
       - "5433:5433"
    restart: unless-stopped