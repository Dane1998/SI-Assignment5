version: '3.4'

services:
  customer:
    image: ${DOCKER_REGISTRY-}customer
    build:
      context: .
      dockerfile: src/Customer/Dockerfile
    ports:
        - 8084:80

  review:
    image: ${DOCKER_REGISTRY-}review
    build:
      context: .
      dockerfile: src/Review/Dockerfile
    ports:
        - 8086:80

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - '9092:9092'

    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  PostgesCustomer:
    container_name: Customer
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Customerdb
    volumes:
       - ./Customer:/customer-data/postgres
    ports:
       - "5432:5432"
    restart: unless-stopped

  PostgesReview:
    container_name: Review
    image: postgres
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=Customerdb
    volumes:
       - ./Review:/review-data/postgres
    ports:
       - "5433:5432"
    restart: unless-stopped